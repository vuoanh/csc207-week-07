import java.util.Arrays;
import java.util.Random;
import java.util.concurrent.ThreadLocalRandom;

public class MergeSort {
	public static void merge(int[] arr, int leftPos, int rightPos, int outArr[], int rightEnd){
		int ElementNum = rightEnd - leftPos +1;
		int leftEnd = rightPos - 1;
		int tmpPos = leftPos;
		while(leftPos <= leftEnd && rightPos <= rightEnd){
			if (arr[leftPos] < arr[rightPos]){
				outArr[tmpPos++] = arr[leftPos++];
			}
			else {
				outArr[tmpPos++] = arr[rightPos++];
			}
		}
		while(leftPos <= leftEnd){
			outArr[tmpPos++] = arr[leftPos++];
		}
		while(rightPos <= rightEnd){
			outArr[tmpPos++] = arr[rightPos++];
		}
		for (int i = 0; i < ElementNum; i++){
			arr[i] = outArr[i];
		}
	}

	public static void mergeSortHelper(int arr[], int lower, int upper, int[] tmpArr){
		if (upper > lower) {
			int mid = lower + (upper - lower) /2;
			mergeSortHelper(arr, lower, mid,tmpArr);
			mergeSortHelper(arr, mid+1, upper, tmpArr);
			merge(arr, lower, mid + 1, tmpArr, upper);
		}
	}
	public static int[] mergeSort(int arr[]){
		int[] tmpArr = new int[arr.length];
		mergeSortHelper(arr, 0, arr.length-1, tmpArr);
		return tmpArr;
	}
	public static void main(String args[]){
		Random rdom = ThreadLocalRandom.current();
		int length = rdom.nextInt(4);
		int[] arrayOne = new int[length];
		for(int i = 0; i < length; i++){
			arrayOne[i] = rdom.nextInt(50);
		}
		System.out.println(Arrays.toString(arrayOne));
		mergeSort(arrayOne);
		System.out.println(Arrays.toString(arrayOne));
	}

}
