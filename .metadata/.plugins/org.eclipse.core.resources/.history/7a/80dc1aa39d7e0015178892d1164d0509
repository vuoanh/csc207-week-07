import java.util.Arrays;
import java.util.Random;
import java.util.concurrent.ThreadLocalRandom;

public class MergeSort {
	public static void merge(int[] arr, int lower, int upper, int outArr[]){
		int mid = (lower+upper) / 2;
		int j = lower;
		int k = mid + 1; // the beginning of the upper half
		int i = lower;
		while(i < upper){
			if (arr[j] < arr[k]){
				outArr[i] = arr[k];
				j++;
				i++;
			}
			else {
				outArr[i] = arr[k];
				k++;
				i++;
			}
			if( i== mid){
				for(int y = k; y < upper; y++){
					outArr[y] = arr[y];
					break;
				}
			}
			if( k == upper){
				for(int y = i; y < mid + 1; y++){
					outArr[y] = arr[y];
					break;
				}
			}
		}
	}
	
	public static int[] mergeSort(int arr[], int lower, int upper, int tmpArray[]){
		int length = arr.length;
		int[] tmpArr = new int[length];
		if (lower == upper) {
			return arr;
		} else {
			merge(arr, lower, upper, tmpArr);
			}
		}
	}
	public static void main(String args[]){
		Random rdom = ThreadLocalRandom.current();
		int length = rdom.nextInt(25);
		int[] arrayOne = new int[length];
		for(int i = 0; i < length; i++){
			arrayOne[i] = rdom.nextInt(50);
		}
		System.out.println(Arrays.toString(arrayOne));
		MergeSort(arrayOne);
		System.out.println(Arrays.toString(arrayOne));
	}
	
}
